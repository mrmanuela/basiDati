-- MySQL Script generated by MySQL Workbench
-- Wed Feb  9 11:58:45 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema BachecaElettronicaAnnunci
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `BachecaElettronicaAnnunci` ;

-- -----------------------------------------------------
-- Schema BachecaElettronicaAnnunci
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `BachecaElettronicaAnnunci` DEFAULT CHARACTER SET utf8 ;
USE `BachecaElettronicaAnnunci` ;

-- -----------------------------------------------------
-- Table `BachecaElettronicaAnnunci`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`user` ;

CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`user` (
  `Username` VARCHAR(50) NOT NULL,
  `Password` CHAR(32) NOT NULL,
  `Ruolo` ENUM("Utente", "UtenteCertificato", "Gestore") NOT NULL,
  PRIMARY KEY (`Username`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BachecaElettronicaAnnunci`.`Utente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`Utente` ;

CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`Utente` (
  `Username` VARCHAR(50) NOT NULL,
  `Nome` VARCHAR(50) NOT NULL,
  `Cognome` VARCHAR(50) NOT NULL,
  `CodiceFiscale` CHAR(16) NOT NULL,
  `DataNascita` DATE NOT NULL,
  `IndirizzoResidenza` VARCHAR(50) NOT NULL,
  `IndirizzoFatturazione` VARCHAR(50) NULL,
  PRIMARY KEY (`Username`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BachecaElettronicaAnnunci`.`utenteCertificato`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`utenteCertificato` ;

CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`utenteCertificato` (
  `Username` VARCHAR(50) NOT NULL,
  `IntestatarioCarta` VARCHAR(50) NOT NULL,
  `CodiceCarta` CHAR(16) NOT NULL,
  `CVC_CVV` CHAR(3) NOT NULL,
  `DataScadenza` DATE NOT NULL,
  INDEX `fk_utenteCertificato_Utente_idx` (`Username` ASC) VISIBLE,
  PRIMARY KEY (`Username`),
  CONSTRAINT `fk_utenteCertificato_Utente`
    FOREIGN KEY (`Username`)
    REFERENCES `BachecaElettronicaAnnunci`.`Utente` (`Username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BachecaElettronicaAnnunci`.`categoria`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`categoria` ;

CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`categoria` (
  `Nome` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`Nome`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BachecaElettronicaAnnunci`.`annuncio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`annuncio` ;

CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`annuncio` (
  `idAnnuncio` INT NOT NULL AUTO_INCREMENT,
  `Titolo` VARCHAR(50) NOT NULL,
  `Descrizione` VARCHAR(100) NOT NULL,
  `Categoria` VARCHAR(50) NOT NULL,
  `Prezzo` DECIMAL NOT NULL,
  `Foto` VARCHAR(50) NULL,
  `StatoVendita` ENUM('Non Venduto', 'Venduto') NOT NULL,
  `StatoRiscossione` ENUM('Non Riscosso', 'Riscosso') NOT NULL,
  `utenteCertificato` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idAnnuncio`),
  INDEX `fk_Annuncio_utenteCertificato1_idx` (`utenteCertificato` ASC) VISIBLE,
  INDEX `fk_Annuncio_categoria1_idx` (`Categoria` ASC) VISIBLE,
  CONSTRAINT `fk_Annuncio_utenteCertificato1`
    FOREIGN KEY (`utenteCertificato`)
    REFERENCES `BachecaElettronicaAnnunci`.`utenteCertificato` (`Username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Annuncio_categoria1`
    FOREIGN KEY (`Categoria`)
    REFERENCES `BachecaElettronicaAnnunci`.`categoria` (`Nome`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BachecaElettronicaAnnunci`.`commento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`commento` ;

CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`commento` (
  `idCommento` INT NOT NULL AUTO_INCREMENT,
  `idAnnuncioCommento` INT NOT NULL,
  `Utente` VARCHAR(50) NOT NULL,
  `Contenuto` VARCHAR(100) NOT NULL,
  `Data_Ora` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idCommento`, `idAnnuncioCommento`),
  INDEX `fk_Commento_Annuncio1_idx` (`idAnnuncioCommento` ASC) VISIBLE,
  INDEX `fk_Commento_Utente1_idx` (`Utente` ASC) VISIBLE,
  CONSTRAINT `fk_Commento_Annuncio1`
    FOREIGN KEY (`idAnnuncioCommento`)
    REFERENCES `BachecaElettronicaAnnunci`.`annuncio` (`idAnnuncio`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Commento_Utente1`
    FOREIGN KEY (`Utente`)
    REFERENCES `BachecaElettronicaAnnunci`.`Utente` (`Username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BachecaElettronicaAnnunci`.`conversazione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`conversazione` ;

CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`conversazione` (
  `idConversazione` INT NOT NULL AUTO_INCREMENT,
  `Utente1` VARCHAR(50) NOT NULL,
  `Utente2` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idConversazione`),
  INDEX `fk_Conversazione_Utente1_idx` (`Utente1` ASC) VISIBLE,
  INDEX `fk_Conversazione_Utente2_idx` (`Utente2` ASC) VISIBLE,
  CONSTRAINT `fk_Conversazione_Utente1`
    FOREIGN KEY (`Utente1`)
    REFERENCES `BachecaElettronicaAnnunci`.`Utente` (`Username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Conversazione_Utente2`
    FOREIGN KEY (`Utente2`)
    REFERENCES `BachecaElettronicaAnnunci`.`Utente` (`Username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BachecaElettronicaAnnunci`.`messaggio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`messaggio` ;

CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`messaggio` (
  `idMessaggio` INT NOT NULL AUTO_INCREMENT,
  `idConversazioneMessaggio` INT NOT NULL,
  `UtenteMittente` VARCHAR(50) NOT NULL,
  `Contenuto` VARCHAR(100) NOT NULL,
  `Data_Ora` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idMessaggio`, `idConversazioneMessaggio`),
  INDEX `fk_messaggio_Conversazione1_idx` (`idConversazioneMessaggio` ASC) VISIBLE,
  INDEX `fk_messaggio_Utente1_idx` (`UtenteMittente` ASC) VISIBLE,
  CONSTRAINT `fk_messaggio_Conversazione1`
    FOREIGN KEY (`idConversazioneMessaggio`)
    REFERENCES `BachecaElettronicaAnnunci`.`conversazione` (`idConversazione`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_messaggio_Utente1`
    FOREIGN KEY (`UtenteMittente`)
    REFERENCES `BachecaElettronicaAnnunci`.`Utente` (`Username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BachecaElettronicaAnnunci`.`mezzocomunicazione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`mezzocomunicazione` ;

CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`mezzocomunicazione` (
  `Utente` VARCHAR(50) NOT NULL,
  `Recapito` VARCHAR(50) NOT NULL,
  `Tipologia` ENUM('Fisso', 'Cellulare', 'Email') NOT NULL,
  `Preferito` TINYINT NOT NULL,
  PRIMARY KEY (`Recapito`),
  INDEX `fk_mezzocomunicazione_Utente1_idx` (`Utente` ASC) VISIBLE,
  CONSTRAINT `fk_mezzocomunicazione_Utente1`
    FOREIGN KEY (`Utente`)
    REFERENCES `BachecaElettronicaAnnunci`.`Utente` (`Username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BachecaElettronicaAnnunci`.`segue`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`segue` ;

CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`segue` (
  `idAnnuncioSegue` INT NOT NULL,
  `Utente` VARCHAR(50) NOT NULL,
  INDEX `fk_segue_Annuncio1_idx` (`idAnnuncioSegue` ASC) VISIBLE,
  INDEX `fk_segue_Utente1_idx` (`Utente` ASC) VISIBLE,
  PRIMARY KEY (`idAnnuncioSegue`, `Utente`),
  CONSTRAINT `fk_segue_Annuncio1`
    FOREIGN KEY (`idAnnuncioSegue`)
    REFERENCES `BachecaElettronicaAnnunci`.`annuncio` (`idAnnuncio`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_segue_Utente1`
    FOREIGN KEY (`Utente`)
    REFERENCES `BachecaElettronicaAnnunci`.`Utente` (`Username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BachecaElettronicaAnnunci`.`Sottocategoria`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`Sottocategoria` ;

CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`Sottocategoria` (
  `Figlia` VARCHAR(50) NOT NULL,
  `Genitore` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`Figlia`, `Genitore`),
  INDEX `fk_categoria_has_categoria_categoria2_idx` (`Genitore` ASC) VISIBLE,
  INDEX `fk_categoria_has_categoria_categoria1_idx` (`Figlia` ASC) VISIBLE,
  CONSTRAINT `fk_categoria_has_categoria_categoria1`
    FOREIGN KEY (`Figlia`)
    REFERENCES `BachecaElettronicaAnnunci`.`categoria` (`Nome`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_categoria_has_categoria_categoria2`
    FOREIGN KEY (`Genitore`)
    REFERENCES `BachecaElettronicaAnnunci`.`categoria` (`Nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `BachecaElettronicaAnnunci` ;

-- -----------------------------------------------------
-- Placeholder table for view `BachecaElettronicaAnnunci`.`report`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`report` (`Venditore` INT, `Intestatario Carta` INT, `Codice Carta` INT, `CVC\CVV` INT, `Data Scadenza` INT, `Debito` INT);

-- -----------------------------------------------------
-- Placeholder table for view `BachecaElettronicaAnnunci`.`bachecaPubblica`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BachecaElettronicaAnnunci`.`bachecaPubblica` (`Id Annuncio` INT, `Venditore` INT, `Categoria` INT, `Titolo` INT, `Descrizione` INT, `Prezzo` INT);

-- -----------------------------------------------------
-- procedure login
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`login`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `login`(
	IN var_username VARCHAR(50),
	IN var_password VARCHAR(50),
	OUT var_role INT
)
BEGIN
	declare var_user_role ENUM('Utente', 'UtenteCertificato', 'Gestore');
    
    select `ruolo` into var_user_role
	 from `user`
		where `Username` = var_username 
        and `Password` = md5(var_password);
	
        
	-- See the corresponding enum in the client
		if var_user_role = 'Utente' then
			set var_role =  1;
		elseif var_user_role = 'UtenteCertificato' then
			set var_role = 2;
		elseif var_user_role = 'Gestore' then
			set var_role = 3;	
		else
			set var_role = 4;
		end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaCategoria
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaCategoria`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaCategoria` ()
BEGIN

    
select Nome as Categoria, Genitore as `Categoria Padre` 
from Categoria left join Sottocategoria on Nome = Figlia;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure riscuotiPercentuale
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`riscuotiPercentuale`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `riscuotiPercentuale` (in var_utente varchar(50))
BEGIN

	declare exit handler for sqlexception
    begin
        rollback;
        resignal;
    end;
    
    set transaction isolation level read committed;
    start transaction;
    
if exists (SELECT report.Venditore FROM report WHERE report.Venditore = var_utente)
then
 update Annuncio
 set StatoRiscossione = 'Riscosso'
 where (StatoRiscossione = 'Non Riscosso' and UtenteCertificato = var_utente and StatoVendita = 'Venduto');
else
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "L'utente non ha alcun debito o non esiste";
end if;

COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaReport
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaReport`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaReport` ()

BEGIN

select * from report;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure creaCategoria
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`creaCategoria`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `creaCategoria` (in var_nome varchar(50), in var_parent varchar(50))
BEGIN

INSERT INTO categoria(Nome) VALUES(var_nome);
if(var_parent is not null)
then 
INSERT INTO sottocategoria(Figlia, Genitore) VALUES (var_nome, var_parent);
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaContatti
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaContatti`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaContatti` (in var_utente varchar(50))
BEGIN

SELECT  Recapito, Tipologia, convert(Preferito,CHAR) as Preferito
FROM mezzocomunicazione 
WHERE Utente = var_utente;   

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aggiornaContattoPreferito
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`aggiornaContattoPreferito`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `aggiornaContattoPreferito` (in contatto varchar(50), in utente varchar(50))
BEGIN
 
if not exists (select recapito 
			from mezzocomunicazione 
            where Recapito = contatto and mezzocomunicazione.Utente = utente) 
            then
			signal sqlstate '45000'SET MESSAGE_TEXT = 'Il contatto inserito non è di tuo possesso';
end if;
 
if exists (select Recapito 
			from mezzocomunicazione 
            where (Utente = utente and Preferito = 1 AND recapito = contatto))
then
signal sqlstate '45000'SET MESSAGE_TEXT = 'Il contatto è già preferito';

ELSE
update mezzocomunicazione set Preferito = 0 WHERE (utente = utente and Preferito = 1);
update mezzocomunicazione set Preferito = 1 WHERE (recapito = contatto);

END if;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aggiornaInfoAnagrafiche
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`aggiornaInfoAnagrafiche`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE  PROCEDURE `aggiornaInfoAnagrafiche`(
	IN var_nome VARCHAR(50),
	IN var_cognome VARCHAR(50),
	IN var_cf char(16),
	IN var_dataNascita DATE,
	IN var_indResidenza VARCHAR(50),
	IN var_indFatturazione VARCHAR(50),
	IN var_username VARCHAR(50)
)
BEGIN

UPDATE utente
SET 
Nome = var_nome ,
Cognome = var_cognome,
CodiceFiscale = var_cf,
DataNascita= var_dataNascita,
IndirizzoResidenza = var_indResidenza,
IndirizzoFatturazione = var_indFatturazione
WHERE Username  = var_username;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure certificaUtente
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`certificaUtente`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `certificaUtente`(
	IN var_username VARCHAR(50),
	IN var_intestatarioCarta VARCHAR(50),
	IN var_codiceCarta CHAR(16),
	IN var_cvc_cvv CHAR(3),
	IN var_dataScadenza DATE
)
BEGIN
insert INTO utentecertificato (Username, IntestatarioCarta, CodiceCarta, CVC_CVV, DataScadenza) VALUES (var_username, var_intestatarioCarta, var_codiceCarta, var_cvc_cvv, var_dataScadenza);
UPDATE user set Ruolo = "UtenteCertificato" WHERE Username = var_username;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure creaAnnuncio
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`creaAnnuncio`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `creaAnnuncio`(
	IN var_titolo VARCHAR(50),
	IN var_descrizione VARCHAR(100),
	IN var_prezzo DECIMAL(10,0),
	IN var_foto VARCHAR(50),
	IN Var_categoria VARCHAR(50),
	IN var_utenteCertificato VARCHAR(50)
)
BEGIN
if var_categoria not in (select Nome from Categoria)
then
signal sqlstate '45000' set message_text = "La categoria in cui vuoi inserire l'annuncio non esiste.";
else
INSERT INTO annuncio (Titolo, Descrizione, Prezzo, Foto, Categoria, UtenteCertificato) 
VALUES (var_titolo, var_descrizione, var_prezzo, var_foto, var_categoria, var_utentecertificato);
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure creaCommento
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`creaCommento`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE  PROCEDURE `creaCommento`(
	IN var_annuncio INT,
	IN var_utente VARCHAR(50),
	IN var_contenuto VARCHAR(100)
)
BEGIN
declare exit handler for sqlexception
begin
	rollback;
	resignal;
end;
set transaction isolation level read committed;
start transaction;
if exists (SELECT idAnnuncio FROM annuncio WHERE idAnnuncio = var_annuncio)
then
INSERT INTO commento (idAnnuncioCommento,Utente, Contenuto, Data_Ora) VALUES (var_annuncio, var_utente, var_contenuto, CURRENT_TIMESTAMP());
ELSE
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "Impossibile pubblicare il commento.";
end if;
commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure creaContatto
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`creaContatto`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `creaContatto`(
	IN var_utente VARCHAR(50),
	IN var_recapito VARCHAR(50),
	IN var_tipologia ENUM('Fisso','Cellulare','Email'),
	IN var_preferito TINYINT
)
BEGIN

INSERT INTO mezzocomunicazione VALUES (var_utente, var_recapito,  var_tipologia,var_preferito);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure creaUtente
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`creaUtente`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `creaUtente`(
	IN username VARCHAR(50),
	IN password CHAR(32),
	IN nome VARCHAR(50),
	IN cognome VARCHAR(50),
	IN cf CHAR(16),
	IN dataNascita DATE,
	IN indResidenza VARCHAR(50),
	IN indFatturazione VARCHAR(50)
)

BEGIN
INSERT INTO user values(username,MD5(password), 'Utente');
INSERT INTO utente VALUES(username,nome, cognome, cf, dataNascita, indResidenza, indFatturazione);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure eliminaAnnuncio
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`eliminaAnnuncio`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE  PROCEDURE `eliminaAnnuncio`(
	IN var_annuncio INT,
	IN var_username VARCHAR(50)
)
BEGIN

if not exists(SELECT idAnnuncio 
from annuncio 
where idAnnuncio = var_annuncio and UtenteCertificato = var_username )
then
SIGNAL sqlstate '45000' SET MESSAGE_TEXT = "Annuncio da eliminare non esiste."; 
else
DELETE FROM annuncio WHERE idAnnuncio = var_annuncio AND utentecertificato = var_username;
end if;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure eliminaContatto
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`eliminaContatto`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE  PROCEDURE `eliminaContatto`(
	IN var_username VARCHAR(50),
	IN var_recapito VARCHAR(50)
)
BEGIN
declare c varchar(50);
SELECT Recapito from mezzocomunicazione where Recapito = var_recapito and Utente = var_username INTO c;
 
if(c is null) then
 signal sqlstate '45000' set message_text = "Il contatto non esiste";
end if;
 
 delete from mezzocomunicazione where Recapito = var_recapito and Utente = var_username;
 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inviaMessaggio
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`inviaMessaggio`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `inviaMessaggio` (in var_utente1 varchar(50), in var_utente2 varchar(50), in contenuto varchar(100))
BEGIN
declare var_idConversazione int;
declare idConv int;

declare exit handler for sqlexception
begin
	rollback;
	resignal;
end;
set transaction isolation level read committed;
start transaction;

if exists(select utentecertificato
		from annuncio where annuncio.StatoVendita = 'Non Venduto' 	
        and annuncio.utenteCertificato = var_utente2)
then 
select idConversazione into idConv
from Conversazione
where (Utente1 = var_utente1 and Utente2 = var_utente2) or 
(Utente2 = var_utente1 and Utente1 = var_utente2);

if(idConv is null)
	then
	insert into Conversazione(Utente1,Utente2) values (var_utente1,var_utente2);
	Select last_insert_id() INTO var_idConversazione FROM conversazione LIMIT 1;
	insert into Messaggio(idConversazioneMessaggio,UtenteMittente,Contenuto,Data_Ora) values(var_idConversazione,var_utente1,contenuto,CURRENT_TIMESTAMP());
else
	insert into Messaggio(idConversazioneMessaggio,UtenteMittente,Contenuto,Data_Ora) values(idConv,var_utente1,contenuto,CURRENT_TIMESTAMP());
end if;	
else
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "L'utente che si vuole contattare non ha annunci pubblicati.";
end if;
    
commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaMieiAnnunci
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaMieiAnnunci`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE  PROCEDURE `visualizzaMieiAnnunci`(
	IN var_utente VARCHAR(50)
)
BEGIN
SELECT annuncio.idAnnuncio as Annuncio, annuncio.UtenteCertificato as Venditore,Titolo,Descrizione,convert(Prezzo,char) as Prezzo, Categoria, annuncio.StatoVendita as `Stato Vendita`
from annuncio 
WHERE annuncio.UtenteCertificato = var_utente and annuncio.StatoVendita = "Non Venduto";
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure segnaVenduto
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`segnaVenduto`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `segnaVenduto` (in var_username varchar(50), in idAnnuncio int)
BEGIN

if not exists( 
select idAnnuncio 
from annuncio
WHERE annuncio.idAnnuncio = idAnnuncio and annuncio.StatoVendita = "Non Venduto" and annuncio.UtenteCertificato = var_username)
then
signal sqlstate '45000' set message_text = "L'annuncio non esiste o è già stato venduto";
end if;

update Annuncio 
set annuncio.StatoVendita = "Venduto" 
where annuncio.idAnnuncio= idAnnuncio and annuncio.utenteCertificato = var_username;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure segueAnnuncio
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`segueAnnuncio`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE  PROCEDURE `segueAnnuncio`(
	IN var_idAnnuncio INT,
	IN var_utente VARCHAR(50)
)
BEGIN
INSERT INTO segue VALUES(var_idAnnuncio, var_utente);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaAnnunciSeguiti
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaAnnunciSeguiti`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaAnnunciSeguiti` (in var_username varchar(50))
BEGIN

select annuncio.idAnnuncio as Annuncio, UtenteCertificato as `Venditore`,Titolo,Prezzo, 
StatoVendita as `Stato Vendita`
from Segue join Annuncio on Segue.idAnnuncioSegue = Annuncio.idAnnuncio
where segue.Utente = var_username;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaBachecaPubblica
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaBachecaPubblica`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaBachecaPubblica` ()
BEGIN
    
Select * from bachecaPubblica;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaChatInCorso
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaChatInCorso`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaChatInCorso` (in username varchar(50))
BEGIN

    

select Utente, Contenuto as `Ultimo messaggio` from(   
select idConversazione, Utente2 as Utente from Conversazione where Utente1 = username
union
select idConversazione, Utente1 as Utente from Conversazione where Utente2 = username) as utenteChat 
join
(select idConv, Contenuto from
(select max(idMessaggio) as idMex, idConversazioneMessaggio as idConv from Messaggio group by idConv) as mexMax
join 
(select Contenuto, idMessaggio from  Messaggio) as contenuto 
on mexMax.idMex = contenuto.idMessaggio)as idConvCont on idConvCont.idConv= utenteChat.idConversazione;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaChatIntera
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaChatIntera`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaChatIntera` (in var_utente1 varchar(50), in var_utente2 varchar(50))
BEGIN
    
select UtenteMittente AS Mittente, Contenuto 
from Messaggio where idConversazioneMessaggio IN 
			(select idConversazione 
			from Conversazione
			where (Utente1 = var_utente1 and Utente2 = var_utente2) or (Utente2 = var_utente1 and Utente1 = var_utente2));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaCommenti
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaCommenti`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaCommenti`(IN var_idAnnuncio INT)
BEGIN

SELECT utente as Utente, Contenuto, Data_Ora as  `Data e Ora `
FROM commento join annuncio on commento.idAnnuncioCommento = annuncio.idAnnuncio
WHERE commento.idAnnuncioCommento = var_idAnnuncio and annuncio.StatoVendita = "Non Venduto";

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaInfoAnagrafiche
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaInfoAnagrafiche`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaInfoAnagrafiche` (in var_utente varchar(50))
BEGIN
select Nome, Cognome , CodiceFiscale as `Codice Fiscale`, DataNascita as `Data Nascita`, IndirizzoResidenza as `Indirizzo Residenza`, 
IndirizzoFatturazione as `IndirizzoFatturazione`
from Utente 
where Username = var_utente;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure creaGestore
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`creaGestore`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `creaGestore` (in username varchar(50), in password varchar(50))

BEGIN
INSERT INTO user values(username,MD5(password), 'Gestore');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaContattiVenditoreSeguiti
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaContattiVenditoreSeguiti`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaContattiVenditoreSeguiti` (in var_utente varchar(50))
BEGIN

SELECT distinct Recapito, Tipologia, convert(Preferito,CHAR) as Preferito from    
(select annuncio.idAnnuncio as Annuncio, UtenteCertificato as `Venditore`
from Segue join Annuncio on Segue.idAnnuncioSegue = Annuncio.idAnnuncio) AS t1
JOIN
(SELECT  Utente, Recapito, Tipologia, convert(Preferito,CHAR) as Preferito FROM mezzocomunicazione JOIN annuncio ON annuncio.UtenteCertificato = mezzocomunicazione.Utente) AS t2
ON t2.Utente = t1.Venditore
WHERE utente = var_utente;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaCommentiSeguiti
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaCommentiSeguiti`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaCommentiSeguiti` (in var_idAnnuncio int, in var_username varchar(50))

BEGIN

SELECT utente as Utente, Contenuto from
(select annuncio.idAnnuncio as Annuncio
from Segue join Annuncio on Segue.idAnnuncioSegue = Annuncio.idAnnuncio where segue.utente = var_username) AS t1
join
(SELECT commento.idAnnuncioCommento, utente as Utente, Contenuto
FROM commento join annuncio on commento.idAnnuncioCommento = annuncio.idAnnuncio where annuncio.idAnnuncio = var_idAnnuncio) as t2
on t2.idAnnuncioCommento = t1.Annuncio;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure creaCommentoSeguiti
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`creaCommentoSeguiti`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `creaCommentoSeguiti` (in var_idAnnuncio int, in var_username varchar(50),	IN var_contenuto VARCHAR(100))
BEGIN

if exists (select annuncio.idAnnuncio as Annuncio
from Segue join Annuncio on Segue.idAnnuncioSegue = Annuncio.idAnnuncio where idAnnuncio = var_idAnnuncio)
then
INSERT INTO commento (idAnnuncioCommento,Utente, Contenuto, Data_Ora) VALUES (var_idAnnuncio, var_username, var_contenuto, current_timestamp());
else
signal sqlstate '45000' set message_text = "Impossibile pubblicare il commento.";
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaContattiVenditore
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaContattiVenditore`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaContattiVenditore` (in var_utente varchar(50))
BEGIN

SELECT  distinct Recapito, Tipologia, convert(Preferito,CHAR) as Preferito 
FROM mezzocomunicazione JOIN annuncio ON annuncio.UtenteCertificato = mezzocomunicazione.Utente
WHERE utente = var_utente and annuncio.StatoVendita = "Non Venduto";


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inviaMessaggioSegui
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`inviaMessaggioSegui`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `inviaMessaggioSegui` (in var_utente1 varchar(50), in var_utente2 varchar(50), in contenuto varchar(100))
BEGIN
declare var_idConversazione int;
declare idConv int;

declare exit handler for sqlexception
begin
	rollback;
	resignal;
end;
set transaction isolation level read committed;
start transaction;

if exists(select annuncio.idAnnuncio as Annuncio
			from Segue join Annuncio on Segue.idAnnuncioSegue = Annuncio.idAnnuncio 
            WHERE annuncio.utenteCertificato = var_utente2 AND segue.Utente = var_utente1 )
then
	select idConversazione into idConv
	from Conversazione
	where (Utente1 = var_utente1 and Utente2 = var_utente2) or 
	(Utente2 = var_utente1 and Utente1 = var_utente2);

	if(idConv is null)
	then
	insert into Conversazione(Utente1,Utente2) values (var_utente1,var_utente2);
	Select last_insert_id() INTO var_idConversazione FROM conversazione LIMIT 1;
	insert into Messaggio(idConversazioneMessaggio,UtenteMittente,Contenuto,Data_Ora) values(var_idConversazione,var_utente1,contenuto,CURRENT_TIMESTAMP());

else
	insert into Messaggio(idConversazioneMessaggio,UtenteMittente,Contenuto,Data_Ora) values(idConv,var_utente1,contenuto,CURRENT_TIMESTAMP());
end if;
else
	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Stai cercando di contattare un utente di cui non segui alcun annuncio.';
end if;
commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure rispondiConversazione
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`rispondiConversazione`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `rispondiConversazione` (in var_utente1 varchar(50), in var_utente2 varchar(50), in contenuto varchar(100))
BEGIN
DECLARE idConv int;

declare exit handler for sqlexception
begin
	rollback;
	resignal;
end;
set transaction isolation level read committed;
start transaction;

select idConversazione into idConv
from Conversazione
where (Utente1 = var_utente1 and Utente2 = var_utente2) or 
(Utente2 = var_utente1 and Utente1 = var_utente2);

insert into Messaggio(idConversazioneMessaggio,UtenteMittente,Contenuto,Data_Ora) values(idConv,var_utente1,contenuto,CURRENT_TIMESTAMP());
commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzaAnnunci
-- -----------------------------------------------------

USE `BachecaElettronicaAnnunci`;
DROP procedure IF EXISTS `BachecaElettronicaAnnunci`.`visualizzaAnnunci`;

DELIMITER $$
USE `BachecaElettronicaAnnunci`$$
CREATE PROCEDURE `visualizzaAnnunci` (in var_utente varchar(50))
BEGIN
SELECT annuncio.idAnnuncio as Annuncio, annuncio.UtenteCertificato as Venditore,Titolo,Descrizione,convert(Prezzo,char) as Prezzo, categoria, annuncio.StatoVendita as `Stato Vendita`, annuncio.StatoRiscossione as `Stato Riscossione`
from annuncio 
WHERE annuncio.UtenteCertificato = var_utente;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `BachecaElettronicaAnnunci`.`report`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`report`;
DROP VIEW IF EXISTS `BachecaElettronicaAnnunci`.`report` ;
USE `BachecaElettronicaAnnunci`;
CREATE  OR REPLACE VIEW `report` AS
SELECT utentecertificato AS Venditore, IntestatarioCarta as `Intestatario Carta`,
codiceCarta AS `Codice Carta`, utentecertificato.CVC_CVV as `CVC\CVV`,
utentecertificato.DataScadenza as `Data Scadenza`, SUM(annuncio.Prezzo * 0.03) AS Debito
FROM annuncio JOIN utentecertificato ON annuncio.utenteCertificato = utentecertificato.Username
WHERE annuncio.StatoRiscossione = "Non Riscosso" AND annuncio.StatoVendita = "Venduto"
group by annuncio.utenteCertificato;

-- -----------------------------------------------------
-- View `BachecaElettronicaAnnunci`.`bachecaPubblica`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BachecaElettronicaAnnunci`.`bachecaPubblica`;
DROP VIEW IF EXISTS `BachecaElettronicaAnnunci`.`bachecaPubblica` ;
USE `BachecaElettronicaAnnunci`;
CREATE  OR REPLACE VIEW `bachecaPubblica` AS
select annuncio.idAnnuncio AS `Id Annuncio`,annuncio.utenteCertificato AS `Venditore`,
annuncio.Categoria AS `Categoria`,annuncio.Titolo AS `Titolo`,annuncio.Descrizione AS `Descrizione`,
annuncio.Prezzo AS `Prezzo` 
from annuncio 
where (annuncio.StatoVendita = 'Non Venduto');
USE `BachecaElettronicaAnnunci`;

DELIMITER $$

USE `BachecaElettronicaAnnunci`$$
DROP TRIGGER IF EXISTS `BachecaElettronicaAnnunci`.`Utente_BEFORE_UPDATE` $$
USE `BachecaElettronicaAnnunci`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BachecaElettronicaAnnunci`.`Utente_BEFORE_UPDATE` BEFORE UPDATE ON `Utente` FOR EACH ROW
BEGIN
if NEW.Nome = '' then
set NEW.Nome = old.Nome;
end if;
 if NEW.Cognome = '' then
set NEW.Cognome = old.Cognome;
end if;
 if NEW.CodiceFiscale = '' or length(NEW.CodiceFiscale) != 16 then
set NEW.CodiceFiscale = OLD.CodiceFiscale;
end if;
if NEW.DataNascita is null then  
SET NEW.DataNascita = OLD.DataNascita;
END if;
if NEW.IndirizzoResidenza = '' then
set NEW.IndirizzoResidenza = OLD.IndirizzoResidenza;
end if;
if NEW.IndirizzoFatturazione = '' then
SET NEW.IndirizzoFatturazione = OLD.IndirizzoFatturazione;
end if;
END$$


USE `BachecaElettronicaAnnunci`$$
DROP TRIGGER IF EXISTS `BachecaElettronicaAnnunci`.`annuncio_BEFORE_DELETE` $$
USE `BachecaElettronicaAnnunci`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BachecaElettronicaAnnunci`.`annuncio_BEFORE_DELETE` BEFORE DELETE ON `annuncio` FOR EACH ROW
BEGIN
if(OLD.StatoVendita = "Venduto" AND OLD.StatoRiscossione = "Non Riscosso")
then
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "Annuncio esistente nel sistema, ma non eliminabile poiche i gestori devono riscuotere la percentuale di vendita.";
End if;
END$$


USE `BachecaElettronicaAnnunci`$$
DROP TRIGGER IF EXISTS `BachecaElettronicaAnnunci`.`commento_BEFORE_INSERT` $$
USE `BachecaElettronicaAnnunci`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BachecaElettronicaAnnunci`.`commento_BEFORE_INSERT` BEFORE INSERT ON `commento` FOR EACH ROW
BEGIN
if(SELECT StatoVendita 
FROM annuncio
WHERE idAnnuncio = NEW.idAnnuncioCommento) = "Venduto"

then
SIGNAL SQLSTATE '45000' set MESSAGE_TEXT = "Annuncio non più attivo";
end if;
END$$


USE `BachecaElettronicaAnnunci`$$
DROP TRIGGER IF EXISTS `BachecaElettronicaAnnunci`.`conversazione_BEFORE_INSERT` $$
USE `BachecaElettronicaAnnunci`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BachecaElettronicaAnnunci`.`conversazione_BEFORE_INSERT` BEFORE INSERT ON `conversazione` FOR EACH ROW
BEGIN
if((NEW.Utente1 = NEW.Utente2))
then
SIGNAL sqlstate '45000'SET MESSAGE_TEXT = 'Impossibile avviare la conversazione';
end if;

if not exists(select utentecertificato
		from annuncio where annuncio.StatoVendita = 'Non Venduto' 
        and annuncio.utenteCertificato = New.Utente2)
then 
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "Impossibile avviare la conversazione.";
end if;

END$$


USE `BachecaElettronicaAnnunci`$$
DROP TRIGGER IF EXISTS `BachecaElettronicaAnnunci`.`mezzocomunicazione_BEFORE_INSERT` $$
USE `BachecaElettronicaAnnunci`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BachecaElettronicaAnnunci`.`mezzocomunicazione_BEFORE_INSERT` BEFORE INSERT ON `mezzocomunicazione` FOR EACH ROW
BEGIN
if(NEW.Preferito = 1 AND
(SELECT Preferito
FROM mezzocomunicazione
WHERE mezzocomunicazione.Utente = NEW.Utente AND mezzocomunicazione.Preferito = 1))

then
SIGNAL SQLSTATE '45000' set MESSAGE_TEXT = 'Ogni utente può avere un solo mezzo di comunicazione preferito';
END if;
END$$


USE `BachecaElettronicaAnnunci`$$
DROP TRIGGER IF EXISTS `BachecaElettronicaAnnunci`.`segue_BEFORE_INSERT` $$
USE `BachecaElettronicaAnnunci`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BachecaElettronicaAnnunci`.`segue_BEFORE_INSERT` BEFORE INSERT ON `segue` FOR EACH ROW
BEGIN
if EXISTS(SELECT segue.Utente FROM segue WHERE segue.Utente = NEW.Utente AND segue.idAnnuncioSegue = NEW.idAnnuncioSegue)
then
SIGNAL SQLSTATE "45000" SET MESSAGE_TEXT = "L'annuncio è già stato seguito.";
END if; 

if(SELECT idAnnuncio FROM annuncio WHERE utenteCertificato = NEW.Utente AND idAnnuncio = NEW.idAnnuncioSegue)
then
SIGNAL SQLSTATE '45000' set MESSAGE_TEXT = 'Non puoi seguire un annuncio da te creato';
END if;

if(SELECT StatoVendita FROM annuncio WHERE idAnnuncio = NEW.idAnnuncioSegue) = "Venduto"
then
SIGNAL SQLSTATE "45000" SET MESSAGE_TEXT = "L'annuncio che vuoi seguire è stato venduto.";
END if; 
 
END$$


USE `BachecaElettronicaAnnunci`$$
DROP TRIGGER IF EXISTS `BachecaElettronicaAnnunci`.`Sottocategoria_BEFORE_INSERT` $$
USE `BachecaElettronicaAnnunci`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BachecaElettronicaAnnunci`.`Sottocategoria_BEFORE_INSERT` BEFORE INSERT ON `Sottocategoria` FOR EACH ROW
BEGIN
if(NEW.Figlia = NEW.Genitore)
then
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "La categoria 'Padre' e 'Figlia' non possono essere le stesse";
END if;
END$$


DELIMITER ;
SET SQL_MODE = '';
DROP USER IF EXISTS gestore;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'gestore' IDENTIFIED BY 'gestore';

GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`riscuotiPercentuale` TO 'gestore';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`creaCategoria` TO 'gestore';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaCategoria` TO 'gestore';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaReport` TO 'gestore';
SET SQL_MODE = '';
DROP USER IF EXISTS login;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'login' IDENTIFIED BY 'login';

GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`login` TO 'login';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`creaUtente` TO 'login';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`creaGestore` TO 'login';
SET SQL_MODE = '';
DROP USER IF EXISTS utente;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'utente' IDENTIFIED BY 'utente';

GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaContatti` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`aggiornaContattoPreferito` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`aggiornaInfoAnagrafiche` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`certificaUtente` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`creaCommento` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`creaContatto` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`eliminaContatto` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`inviaMessaggio` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`segueAnnuncio` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaAnnunciSeguiti` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaBachecaPubblica` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaChatInCorso` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaChatIntera` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaCommenti` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaInfoAnagrafiche` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaContattiVenditoreSeguiti` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaCommentiSeguiti` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`creaCommentoSeguiti` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaContattiVenditore` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`inviaMessaggioSegui` TO 'utente';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`rispondiConversazione` TO 'utente';
SET SQL_MODE = '';
DROP USER IF EXISTS utenteCertificato;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'utenteCertificato' IDENTIFIED BY 'utenteCertificato';

GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaContatti` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`aggiornaContattoPreferito` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`aggiornaInfoAnagrafiche` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`creaAnnuncio` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`creaCommento` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`creaContatto` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`eliminaAnnuncio` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`eliminaContatto` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`inviaMessaggio` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaMieiAnnunci` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`segnaVenduto` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`segueAnnuncio` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaAnnunciSeguiti` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaBachecaPubblica` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaChatInCorso` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaChatIntera` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaCommenti` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaCategoria` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaInfoAnagrafiche` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaContattiVenditoreSeguiti` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaCommentiSeguiti` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`creaCommentoSeguiti` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaContattiVenditore` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`inviaMessaggioSegui` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`rispondiConversazione` TO 'utenteCertificato';
GRANT EXECUTE ON procedure `BachecaElettronicaAnnunci`.`visualizzaAnnunci` TO 'utenteCertificato';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `BachecaElettronicaAnnunci`.`user`
-- -----------------------------------------------------
START TRANSACTION;
USE `BachecaElettronicaAnnunci`;
INSERT INTO `BachecaElettronicaAnnunci`.`user` (`Username`, `Password`, `Ruolo`) VALUES ('Gestore1', md5("Gestore1"), 'Gestore');
INSERT INTO `BachecaElettronicaAnnunci`.`user` (`Username`, `Password`, `Ruolo`) VALUES ('Fiamma', md5("Fiamma"), 'Utente');
INSERT INTO `BachecaElettronicaAnnunci`.`user` (`Username`, `Password`, `Ruolo`) VALUES ('Fernanda', md5("Fernanda"), 'UtenteCertificato');
INSERT INTO `BachecaElettronicaAnnunci`.`user` (`Username`, `Password`, `Ruolo`) VALUES ('Gestore2', md5("Gestore2"), 'Gestore');
INSERT INTO `BachecaElettronicaAnnunci`.`user` (`Username`, `Password`, `Ruolo`) VALUES ('Lorenzo', md5("Lorenzo"), 'UtenteCertificato');
INSERT INTO `BachecaElettronicaAnnunci`.`user` (`Username`, `Password`, `Ruolo`) VALUES ('Manuela', md5("Manuela"), 'Utente');

COMMIT;


-- -----------------------------------------------------
-- Data for table `BachecaElettronicaAnnunci`.`Utente`
-- -----------------------------------------------------
START TRANSACTION;
USE `BachecaElettronicaAnnunci`;
INSERT INTO `BachecaElettronicaAnnunci`.`Utente` (`Username`, `Nome`, `Cognome`, `CodiceFiscale`, `DataNascita`, `IndirizzoResidenza`, `IndirizzoFatturazione`) VALUES ('Fiamma', 'Fiamma', 'Reali', 'RLEMNL97R57I838W', '2018-07-31', 'Monte', NULL);
INSERT INTO `BachecaElettronicaAnnunci`.`Utente` (`Username`, `Nome`, `Cognome`, `CodiceFiscale`, `DataNascita`, `IndirizzoResidenza`, `IndirizzoFatturazione`) VALUES ('Fernanda', 'Fernanda', 'Rea', 'RLEMNL97R57I838W', '1967-12-24', 'Monte', NULL);
INSERT INTO `BachecaElettronicaAnnunci`.`Utente` (`Username`, `Nome`, `Cognome`, `CodiceFiscale`, `DataNascita`, `IndirizzoResidenza`, `IndirizzoFatturazione`) VALUES ('Lorenzo', 'Lorenzo', 'Zacca', 'ZCCLNZ95R57I838W', '1995-04-04', 'Isola', NULL);
INSERT INTO `BachecaElettronicaAnnunci`.`Utente` (`Username`, `Nome`, `Cognome`, `CodiceFiscale`, `DataNascita`, `IndirizzoResidenza`, `IndirizzoFatturazione`) VALUES ('Manuela', 'Manuela', 'Reali', 'RLEMNL97R57I838W', '1997-10-17', 'Monte', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `BachecaElettronicaAnnunci`.`utenteCertificato`
-- -----------------------------------------------------
START TRANSACTION;
USE `BachecaElettronicaAnnunci`;
INSERT INTO `BachecaElettronicaAnnunci`.`utenteCertificato` (`Username`, `IntestatarioCarta`, `CodiceCarta`, `CVC_CVV`, `DataScadenza`) VALUES ('Fernanda', 'Fernanda Rea', '1234567890123456', '123', '2022-01-07');
INSERT INTO `BachecaElettronicaAnnunci`.`utenteCertificato` (`Username`, `IntestatarioCarta`, `CodiceCarta`, `CVC_CVV`, `DataScadenza`) VALUES ('Lorenzo', 'Lorenzo Zacca', '1234567890123456', '345', '2022-01-08');

COMMIT;


-- -----------------------------------------------------
-- Data for table `BachecaElettronicaAnnunci`.`categoria`
-- -----------------------------------------------------
START TRANSACTION;
USE `BachecaElettronicaAnnunci`;
INSERT INTO `BachecaElettronicaAnnunci`.`categoria` (`Nome`) VALUES ('Televisione');
INSERT INTO `BachecaElettronicaAnnunci`.`categoria` (`Nome`) VALUES ('Samsung');
INSERT INTO `BachecaElettronicaAnnunci`.`categoria` (`Nome`) VALUES ('Apple');
INSERT INTO `BachecaElettronicaAnnunci`.`categoria` (`Nome`) VALUES ('Smartphone');

COMMIT;


-- -----------------------------------------------------
-- Data for table `BachecaElettronicaAnnunci`.`annuncio`
-- -----------------------------------------------------
START TRANSACTION;
USE `BachecaElettronicaAnnunci`;
INSERT INTO `BachecaElettronicaAnnunci`.`annuncio` (`idAnnuncio`, `Titolo`, `Descrizione`, `Categoria`, `Prezzo`, `Foto`, `StatoVendita`, `StatoRiscossione`, `utenteCertificato`) VALUES (1, 's21', 'Nuovo 256 gb', 'Samsung', 500, NULL, 'Non Venduto', 'Non Riscosso', 'Fernanda');
INSERT INTO `BachecaElettronicaAnnunci`.`annuncio` (`idAnnuncio`, `Titolo`, `Descrizione`, `Categoria`, `Prezzo`, `Foto`, `StatoVendita`, `StatoRiscossione`, `utenteCertificato`) VALUES (2, 's22', 'Schermo rotto', 'Samsung', 400, NULL, 'Non Venduto', 'Non Riscosso', 'Fernanda');
INSERT INTO `BachecaElettronicaAnnunci`.`annuncio` (`idAnnuncio`, `Titolo`, `Descrizione`, `Categoria`, `Prezzo`, `Foto`, `StatoVendita`, `StatoRiscossione`, `utenteCertificato`) VALUES (3, 'iphone 13', 'Batteria bruciata', 'Apple', 600, NULL, 'Venduto', 'Non Riscosso', 'Lorenzo');
INSERT INTO `BachecaElettronicaAnnunci`.`annuncio` (`idAnnuncio`, `Titolo`, `Descrizione`, `Categoria`, `Prezzo`, `Foto`, `StatoVendita`, `StatoRiscossione`, `utenteCertificato`) VALUES (4, 'iphone12', 'Nuovo 128gb', 'Apple', 1000, NULL, 'Non Venduto', 'Riscosso', 'Lorenzo');

COMMIT;


-- -----------------------------------------------------
-- Data for table `BachecaElettronicaAnnunci`.`commento`
-- -----------------------------------------------------
START TRANSACTION;
USE `BachecaElettronicaAnnunci`;
INSERT INTO `BachecaElettronicaAnnunci`.`commento` (`idCommento`, `idAnnuncioCommento`, `Utente`, `Contenuto`, `Data_Ora`) VALUES (1, 1, 'Fiamma', 'Colore?', '2022-02-2 00:00:00');

COMMIT;


-- -----------------------------------------------------
-- Data for table `BachecaElettronicaAnnunci`.`conversazione`
-- -----------------------------------------------------
START TRANSACTION;
USE `BachecaElettronicaAnnunci`;
INSERT INTO `BachecaElettronicaAnnunci`.`conversazione` (`idConversazione`, `Utente1`, `Utente2`) VALUES (1, 'Fiamma', 'Fernanda');

COMMIT;


-- -----------------------------------------------------
-- Data for table `BachecaElettronicaAnnunci`.`messaggio`
-- -----------------------------------------------------
START TRANSACTION;
USE `BachecaElettronicaAnnunci`;
INSERT INTO `BachecaElettronicaAnnunci`.`messaggio` (`idMessaggio`, `idConversazioneMessaggio`, `UtenteMittente`, `Contenuto`, `Data_Ora`) VALUES (1, 1, 'Fiamma', 'Ancora disponibile?', '2022-02-04 00:00:00');

COMMIT;


-- -----------------------------------------------------
-- Data for table `BachecaElettronicaAnnunci`.`mezzocomunicazione`
-- -----------------------------------------------------
START TRANSACTION;
USE `BachecaElettronicaAnnunci`;
INSERT INTO `BachecaElettronicaAnnunci`.`mezzocomunicazione` (`Utente`, `Recapito`, `Tipologia`, `Preferito`) VALUES ('Lorenzo', '123456', 'Cellulare', 1);
INSERT INTO `BachecaElettronicaAnnunci`.`mezzocomunicazione` (`Utente`, `Recapito`, `Tipologia`, `Preferito`) VALUES ('Fernanda', '123123', 'Cellulare', 0);
INSERT INTO `BachecaElettronicaAnnunci`.`mezzocomunicazione` (`Utente`, `Recapito`, `Tipologia`, `Preferito`) VALUES ('Lorenzo', 'lor@gmail.com', 'Email', 0);

COMMIT;


-- -----------------------------------------------------
-- Data for table `BachecaElettronicaAnnunci`.`segue`
-- -----------------------------------------------------
START TRANSACTION;
USE `BachecaElettronicaAnnunci`;
INSERT INTO `BachecaElettronicaAnnunci`.`segue` (`idAnnuncioSegue`, `Utente`) VALUES (1, 'Fiamma');

COMMIT;


-- -----------------------------------------------------
-- Data for table `BachecaElettronicaAnnunci`.`Sottocategoria`
-- -----------------------------------------------------
START TRANSACTION;
USE `BachecaElettronicaAnnunci`;
INSERT INTO `BachecaElettronicaAnnunci`.`Sottocategoria` (`Figlia`, `Genitore`) VALUES ('Samsung', 'Smartphone');
INSERT INTO `BachecaElettronicaAnnunci`.`Sottocategoria` (`Figlia`, `Genitore`) VALUES ('Apple', 'Smartphone');

COMMIT;

